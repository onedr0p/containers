---
name: Release Dispatch

on:
  repository_dispatch:
    types: [release-dispatch]

env:
  TOKEN: ${{ secrets.TOKEN }}
  # renovate: datasource=github-releases depName=aelsabbahy/goss
  GOSS_VERSION: v0.3.18

jobs:
  main:
    name: Build, Test & Push
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        app: ["${{ github.event.client_payload.app }}"]
        channel: ${{ github.event.client_payload.channels }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          fetch-depth: 1

      - uses: cue-lang/setup-cue@v1.0.0-alpha.2
      - name: Validate Metadata
        shell: bash
        run: |-
          cue vet --schema '#Spec' ./apps/${{ matrix.app }}/metadata.json ./metadata.rules.cue

      - name: Install Tools
        run: sudo apt-get install moreutils jo

      - name: Setup Workflow Variables
        id: vars
        run: |-
          container_base=$(jq '.base' ./apps/${{ matrix.app }}/metadata.json)
          echo "::set-output name=chan_build_date::$(date --rfc-3339=seconds --utc)"

          chan_config=$(jq --arg chan "${{ matrix.channel }}" '(.channels | .[] | select(.name == $chan))' ./apps/${{ matrix.app }}/metadata.json)
          chan_stable=$(jq --raw-output '.stable' <<< "${chan_config}")

          chan_platforms=$(jq --raw-output '.platforms | join(",")' <<< "${chan_config}") && \
              echo "::set-output name=chan_platforms::${chan_platforms}"
          chan_tests_enabled=$(jq --raw-output '.tests.enabled' <<< "${chan_config}") && \
              echo "::set-output name=chan_tests_enabled::${chan_tests_enabled}"
          chan_tests_type=$(jq --raw-output '.tests.type' <<< "${chan_config}") && \
              echo "::set-output name=chan_tests_type::${chan_tests_type}"

          chan_upstream_version=$(bash ./.github/scripts/upstream.sh "${{ matrix.app }}" "${{ matrix.channel }}") && \
              echo "::set-output name=chan_upstream_version::${chan_upstream_version}"

          if [[ "${chan_tests_enabled}" == true && "${chan_tests_type}" == "cli" ]]; then
              echo "::set-output name=chan_goss_args::tail -f /dev/null"
          fi

          if [[ "${container_base}" == true ]]; then
              echo "::set-output name=chan_label_type::org.opencontainers.image.base"
          else
              echo "::set-output name=chan_label_type::org.opencontainers.image"
          fi

          if test -f "./apps/${{ matrix.app }}/${{ matrix.channel }}/Dockerfile"; then
              echo "::set-output name=chan_dockerfile::./apps/${{ matrix.app }}/${{ matrix.channel }}/Dockerfile"
              echo "::set-output name=chan_goss_config::./apps/${{ matrix.app }}/${{ matrix.channel }}/goss.yaml"
          else
              echo "::set-output name=chan_dockerfile::./apps/${{ matrix.app }}/Dockerfile"
              echo "::set-output name=chan_goss_config::./apps/${{ matrix.app }}/ci/goss.yaml"
          fi

          if [[ "${chan_stable}" == true ]]; then
              echo "::set-output name=chan_tag_cache::${{ matrix.app }}:cachez"
              echo "::set-output name=chan_tag_rolling::${{ matrix.app }}:rolling"
              echo "::set-output name=chan_tag_version::${{ matrix.app }}:${chan_upstream_version}"
          else
              echo "::set-output name=chan_tag_cache::${{ matrix.app }}-${{ matrix.channel }}:cachez"
              echo "::set-output name=chan_tag_rolling::${{ matrix.app }}-${{ matrix.channel }}:rolling"
              echo "::set-output name=chan_tag_version::${{ matrix.app }}-${{ matrix.channel }}:${chan_upstream_version}"
          fi

      - name: Setup Goss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        uses: e1himself/goss-installation-action@v1.0.4
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest
          buildkitd-flags: --debug

      - name: Build Cache Container
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ matrix.channel }}
          labels: |-
            ${{ steps.vars.outputs.chan_label_type }}.created="${{ steps.vars.outputs.chan_build_date }}"
            ${{ steps.vars.outputs.chan_label_type }}.title="${{ matrix.app }} (${{ matrix.channel }})"
            ${{ steps.vars.outputs.chan_label_type }}.version="${{ steps.vars.outputs.chan_upstream_version }}"
            ${{ steps.vars.outputs.chan_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          file: ${{ steps.vars.outputs.chan_dockerfile }}
          load: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_cache }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss Tests
        id: dgoss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.chan_goss_config }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: >
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_cache }} ${{ steps.vars.outputs.chan_goss_args }}

      - name: Build & Push
        if: ${{ github.event.client_payload.push == true }}
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ matrix.channel }}
          labels: |-
            ${{ steps.vars.outputs.chan_label_type }}.created="${{ steps.vars.outputs.chan_build_date }}"
            ${{ steps.vars.outputs.chan_label_type }}.title="${{ matrix.app }} (${{ matrix.channel }})"
            ${{ steps.vars.outputs.chan_label_type }}.version="${{ steps.vars.outputs.chan_upstream_version }}"
            ${{ steps.vars.outputs.chan_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          platforms: ${{ steps.vars.outputs.chan_platforms }}
          file: ${{ steps.vars.outputs.chan_dockerfile }}
          push: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_rolling }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build successful
        id: build-success
        if: ${{ always() && steps.release.outcome == 'success' }}
        run: |-
          jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).build_status.success = true' ./apps/${{ matrix.app }}/metadata.json | sponge ./apps/${{ matrix.app }}/metadata.json
          jq --arg c "${{ matrix.channel }}" --arg d "${{ steps.vars.outputs.chan_build_date }}" '(.channels | .[] | select(.name == $c)).build_status.ts = $d' ./apps/${{ matrix.app }}/metadata.json | sponge ./apps/${{ matrix.app }}/metadata.json
          echo "::set-output name=commit-message::ðŸŽ‰ ${{ matrix.app }}-${{ matrix.channel }} (${{ steps.vars.outputs.chan_upstream_version }})"

      - name: Build failed
        id: build-failed
        if: ${{ always() && (steps.release.outcome == 'failure' || steps.dgoss.outcome == 'failure') }}
        run: |-
          jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).build_status.success = false' ./apps/${{ matrix.app }}/metadata.json | sponge ./apps/${{ matrix.app }}/metadata.json
          jq --arg c "${{ matrix.channel }}" --arg d "${{ steps.vars.outputs.chan_build_date }}" '(.channels | .[] | select(.name == $c)).build_status.ts = $d' ./apps/${{ matrix.app }}/metadata.json | sponge ./apps/${{ matrix.app }}/metadata.json
          echo "::set-output name=commit-message::ðŸ’¥ ${{ matrix.app }}-${{ matrix.channel }} (${{ steps.vars.outputs.chan_upstream_version }})"

      - name: Commit Release Status
        id: commit-status
        if: ${{ always() && github.event.client_payload.push == true }}
        continue-on-error: true
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          pull: --rebase --autostash
          message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}

            View run at: https://github.com/onedr0p/containers/actions/runs/${{ github.run_id }}
          add: "*.json"

      # In the matrix it is possible for things to complete
      # just at the right time to throw a conflict, in that
      # case it will try to pull and commit one more time
      - name: Snoozing randomly (retry)
        if: ${{ always()  && github.event.client_payload.push == true && steps.commit-status.outcome == 'failure' }}
        run: |-
          perl -e 'sleep int(rand(30))'

      - name: Commit statuses (retry)
        if: ${{ always() && github.event.client_payload.push == true && steps.commit-status.outcome == 'failure' }}
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          pull: --rebase --autostash
          message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}

            View run at: https://github.com/onedr0p/containers/actions/runs/${{ github.run_id }}
          add: "*.json"
