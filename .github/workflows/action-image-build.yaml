---
name: "Action: Image Build"

on:
  workflow_call:
    inputs:
      imagesToBuild:
        description: |-
          Pass a json string with the images and channels to build. e.g.:
            [
              {
                "app": "sonarr",
                "channel": "main"
              },
              {
                "app": "sonarr",
                "channel": "develop"
              }
            ]
        required: false
        type: string
        default: ''

      pushImages:
        required: false
        default: 'false'
        type: string

      updateMetadata:
        required: false
        default: 'false'
        type: string

      sendNotification:
        required: false
        default: 'false'
        type: string

env:
  IMAGE_REGISTRY_GHCR: ghcr.io

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-22.04
    if: inputs.imagesToBuild != '' && inputs.imagesToBuild != '[]'
    strategy:
      matrix:
        image: ["${{ fromJson(inputs.imagesToBuild) }}"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |-
          container_base=$(jq '.base' ./apps/${{ matrix.image.app }}/metadata.json)
          echo "chan_build_date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

          chan_config=$(jq --arg chan "${{ matrix.image.channel }}" '(.channels | .[] | select(.name == $chan))' ./apps/${{ matrix.image.app }}/metadata.json)
          chan_stable=$(jq --raw-output '.stable' <<< "${chan_config}")

          chan_platforms=$(jq --raw-output '.platforms | join(",")' <<< "${chan_config}") && \
              echo "chan_platforms=${chan_platforms}" >> $GITHUB_OUTPUT
          chan_tests_enabled=$(jq --raw-output '.tests.enabled' <<< "${chan_config}") && \
              echo "chan_tests_enabled=${chan_tests_enabled}" >> $GITHUB_OUTPUT
          chan_tests_type=$(jq --raw-output '.tests.type' <<< "${chan_config}") && \
              echo "chan_tests_type=${chan_tests_type}" >> $GITHUB_OUTPUT

          chan_upstream_version=$(bash ./.github/scripts/upstream.sh "${{ matrix.image.app }}" "${{ matrix.image.channel }}") && \
              echo "chan_upstream_version=${chan_upstream_version}" >> $GITHUB_OUTPUT

          if [[ "${chan_tests_enabled}" == true && "${chan_tests_type}" == "cli" ]]; then
              echo "chan_goss_args=tail -f /dev/null" >> $GITHUB_OUTPUT
          fi

          if [[ "${container_base}" == true ]]; then
              echo "chan_label_type=org.opencontainers.image.base" >> $GITHUB_OUTPUT
          else
              echo "chan_label_type=org.opencontainers.image" >> $GITHUB_OUTPUT
          fi

          if test -f "./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/Dockerfile"; then
              echo "chan_dockerfile=./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/Dockerfile" >> $GITHUB_OUTPUT
              echo "chan_goss_config=./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/goss.yaml" >> $GITHUB_OUTPUT
          else
              echo "chan_dockerfile=./apps/${{ matrix.image.app }}/Dockerfile" >> $GITHUB_OUTPUT
              echo "chan_goss_config=./apps/${{ matrix.image.app }}/ci/goss.yaml" >> $GITHUB_OUTPUT
          fi

          if [[ "${chan_stable}" == true ]]; then
              echo "chan_tag_rolling=${{ matrix.image.app }}:rolling" >> $GITHUB_OUTPUT
              echo "chan_tag_version=${{ matrix.image.app }}:${chan_upstream_version}" >> $GITHUB_OUTPUT
          else
              echo "chan_tag_rolling=${{ matrix.image.app }}-${{ matrix.image.channel }}:rolling" >> $GITHUB_OUTPUT
              echo "chan_tag_version=${{ matrix.image.app }}-${{ matrix.image.channel }}:${chan_upstream_version}" >> $GITHUB_OUTPUT
          fi

      # https://github.com/redhat-actions/buildah-build/issues/100
      - name: Setup Tools
        shell: bash
        run: |
          echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04/ /' | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_22.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg > /dev/null
          sudo apt-get update
          sudo apt-get install -y moreutils jo qemu-user-static
          sudo apt-get install -y buildah -o Dpkg::Options::="--force-overwrite"

      - name: Setup CUE
        uses: cue-lang/setup-cue@v1.0.0-alpha.2

      - name: Setup Goss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        uses: e1himself/goss-installation-action@v1.1.0
        with:
          # renovate: datasource=github-releases depName=aelsabbahy/goss
          version: v0.3.20

      - name: Validate image metadata
        shell: bash
        run: |-
          cue vet --schema '#Spec' ./apps/${{ matrix.image.app }}/metadata.json ./metadata.rules.cue

      - name: Build all platforms
        id: build_image
        uses: redhat-actions/buildah-build@v2.10
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ matrix.image.channel }}
          platforms: ${{ steps.vars.outputs.chan_platforms }}
          context: .
          containerfiles: |
            ${{ steps.vars.outputs.chan_dockerfile }}
          layers: true
          tags: |-
            ${{ env.IMAGE_REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_rolling }}
            ${{ env.IMAGE_REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_version }}
          labels: |-
            ${{ steps.vars.outputs.chan_label_type }}.created="${{ steps.vars.outputs.chan_build_date }}"
            ${{ steps.vars.outputs.chan_label_type }}.title="${{ matrix.image.app }} (${{ matrix.image.channel }})"
            ${{ steps.vars.outputs.chan_label_type }}.version="${{ steps.vars.outputs.chan_upstream_version }}"
            ${{ steps.vars.outputs.chan_label_type }}.authors="Devin Buhl <devin@buhl.casa>"
            ${{ steps.vars.outputs.chan_label_type }}.url="https://github.com/onedr0p/containers/apps/${{ matrix.image.app }}"
            ${{ steps.vars.outputs.chan_label_type }}.build.url="https://github.com/onedr0p/containers/actions/runs/${{ github.run_id }}"
            ${{ steps.vars.outputs.chan_label_type }}.documentation="https://github.com/onedr0p/containers/apps/${{ matrix.image.app }}/README.md"
            ${{ steps.vars.outputs.chan_label_type }}.revision="${{ github.sha }}"

      - name: Run Goss tests
        id: dgoss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        shell: bash
        env:
          CONTAINER_RUNTIME: podman
          GOSS_FILE: ${{ steps.vars.outputs.chan_goss_config }}
          GOSS_OPTS: |-
            --sleep 5s --retry-timeout 60s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: >
          dgoss run ${{ env.IMAGE_REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_rolling }} ${{ steps.vars.outputs.chan_goss_args }}

      - name: Push To GHCR
        id: push_to_ghcr
        if: ${{ inputs.pushImages == 'true' }}
        uses: redhat-actions/push-to-registry@v2.6
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY_GHCR }}/${{ env.IMAGE_NAMESPACE }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build successful
        id: build-success
        if: ${{ always() && steps.build_image.outcome == 'success' && steps.dgoss.outcome == 'success' && (steps.push_to_ghcr.outcome == 'success' || steps.push_to_ghcr.outcome == 'skipped') }}
        run: |-
          echo "message=ðŸŽ‰ ${{ matrix.image.app }}-${{ matrix.image.channel }} (${{ steps.vars.outputs.chan_upstream_version }})" >> $GITHUB_OUTPUT
          echo "color=0x00FF00" >> $GITHUB_OUTPUT
          echo "::group::Container log output"
          cat "goss_container_log_output"
          echo "::endgroup::"

      - name: Build failed
        id: build-failed
        if: ${{ always() && (steps.build_image.outcome == 'failure' || steps.dgoss.outcome == 'failure' || steps.push_to_ghcr.outcome == 'failure') }}
        run: |-
          echo "message=ðŸ’¥ ${{ matrix.image.app }}-${{ matrix.image.channel }} (${{ steps.vars.outputs.chan_upstream_version }})" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
          echo "::group::Container log output"
          cat "goss_container_log_output"
          echo "::endgroup::"

      - name: Send Discord Webhook
        uses: sarisia/actions-status-discord@v1
        if: ${{ always() && inputs.sendNotification == 'true' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ${{ steps.build-failed.outputs.message || steps.build-success.outputs.message }}
          color: ${{ steps.build-failed.outputs.color }}
          username: GitHub Actions

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build_success:
    name: Build matrix success
    runs-on: ubuntu-22.04
    needs:
      - build-and-test
    if: ${{ always() }}
    steps:
      - name: Check build matrix status
        if: ${{ (inputs.imagesToBuild != '' && inputs.imagesToBuild != '[]') && (needs.build-and-test.result != 'success') }}
        run: exit 1
