---
name: "Action: Image Build"

on:
  workflow_call:
    inputs:
      imageToBuild:
        description: |-
          Pass a json string with the image and channel to build. e.g.:
              {
                "app": "sonarr",
                "channel": "main"
              }
        required: false
        type: string
        default: ''

      pushImages:
        required: false
        default: 'false'
        type: string

      sendNotification:
        required: false
        default: 'false'
        type: string

    outputs:
      image_name:
        description: The name of the image that was built (without repository, user, or tag - "sonarr-main")
        value: ${{ jobs.generate-metadata.outputs.chan_image_name}}
      version:
        description: The version of the app that was build (e.g. "3.0.6.1196")
        value: ${{ jobs.generate_metadata.outputs.chan_upstream_version }}

jobs:
  generate-metadata:
    uses: ./.github/workflows/generate-metadata.yaml
    with:
      imageToBuild: ${{ inputs.imageToBuild }}

  build-and-test:
    name: Build and Test
    needs:
      - generate-metadata
    runs-on: ubuntu-latest
    if: ${{ inputs.imageToBuild != '' && inputs.imageToBuild != '{}' }}
    strategy:
      matrix:
        platform: ["${{ fromJson(needs.generate-metadata.outputs.chan_platforms) }}"]
    env:
      image: ${{ fromJSON(inputs.imageToBuild) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Tools
        shell: bash
        run: sudo apt-get install -y moreutils jo

      - name: Setup CUE
        uses: cue-lang/setup-cue@0be332bb74c8a2f07821389447ba3163e2da3bfb

      - name: Setup Goss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        uses: e1himself/goss-installation-action@v1.1.0
        with:
          version: v0.3.21

      - name: Validate image metadata
        shell: bash
        run: cue vet --schema '#Spec' ./apps/${{ env.image.app }}/metadata.json ./metadata.rules.cue

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup GHCR
        if: ${{ inputs.pushImages == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Platform Image
        uses: docker/build-push-action@v4
        id: build
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ env.image.channel }}
          context: .
          platforms: ${{ matrix.platform }}
          file: ${{ needs.generate-metadata.outputs.chan_dockerfile }}
          load: true
          output: type=image,name=ghcr.io/${{ github.repository_owner }}/${{ needs.generate-metadata.outputs.chan_image_name }},push-by-digest=true,name-canonical=true,push=${{ inputs.pushImages }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss tests
        id: dgoss
        if: ${{ needs.generate-metadata.outputs.chan_tests_enabled == 'true' }}
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ needs.generate-metadata.outputs.chan_goss_file }}
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: dgoss run ghcr.io/${{ github.repository_owner }}/${{ needs.generate-metadata.outputs.chan_image_name }}@sha256:${{ steps.build.outputs.digest }}

      - name: Export Digest
        id: export-digest
        if: ${{ inputs.pushImages == 'true' }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload Digest
        if: ${{ inputs.push == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - generate-metadata
      - build-and-test
    if: ${{ inputs.pushImages == 'true' }}

    steps:
      - name: Download Digests
        uses: actions/download-artifact@v2
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Manifests
        id: merge
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ needs.generate-metadata.outputs.chan_tag_rolling}}  \
            -t ${{ needs.generate-metadata.outputs.chan_tag_version }} \
             $(printf 'ghcr.io/${{ github.repository_owner }}/${{ needs.generate-metadata.outputs.chan_image_name }}@sha256:%s ' *)

      - name: Inspect Image
        id: inspect
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ needs.generate-metadata.outputs.chan_tag_version }}

  notify:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - merge
    if: ${{ always() && inputs.pushImages == 'true' && inputs.sendNotification == 'true'}}
    steps:
      - name: Build successful
        id: build-success
        if: ${{ always() && needs.merge.outcome == 'success' && needs.build-and-test.outcome == 'success' }}
        run: |-
          echo "message=ðŸŽ‰ ${{ matrix.image.app }}-${{ matrix.image.channel }} (${{ steps.matrix-build.outputs.version }})" >> $GITHUB_OUTPUT
          echo "color=0x00FF00" >> $GITHUB_OUTPUT

      - name: Build failed
        id: build-failed
        if: ${{ always() && (needs.build-and-test.outcome == 'failure' || needs.merge.outcome == 'failure') }}
        run: |-
          echo "message=ðŸ’¥ ${{ matrix.image.app }}-${{ matrix.image.channel }} (${{ steps.matrix-build.outputs.version }})" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT

      - name: Send Discord Webhook
        uses: sarisia/actions-status-discord@v1
        if: ${{ always() && inputs.sendNotification == 'true' }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ${{ steps.build-failed.outputs.message || steps.build-success.outputs.message }}
          color: ${{ steps.build-failed.outputs.color }}
          username: GitHub Actions
