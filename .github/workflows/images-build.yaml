name: "Images build"

on:
  workflow_call:
    inputs:
      imagesToBuild:
        description: |-
          Pass a json string with the images and channels to build. e.g.:
            [
              {
                "app": "sonarr",
                "channel": "main"
              },
              {
                "app": "sonarr",
                "channel": "develop"
              }
            ]
        required: false
        type: string
        default: ''

      pushImages:
        required: false
        default: 'false'
        type: string

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    if: inputs.imagesToBuild != ''
    strategy:
      matrix:
        image: ["${{ fromJson(inputs.imagesToBuild) }}"]
      fail-fast: false
    steps:
      # Set up workflow
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |-
          container_base=$(jq '.base' ./apps/${{ matrix.image.app }}/metadata.json)
          echo "::set-output name=chan_build_date::$(date --rfc-3339=seconds --utc)"

          chan_config=$(jq --arg chan "${{ matrix.image.channel }}" '(.channels | .[] | select(.name == $chan))' ./apps/${{ matrix.image.app }}/metadata.json)
          chan_stable=$(jq --raw-output '.stable' <<< "${chan_config}")

          chan_platforms=$(jq --raw-output '.platforms | join(",")' <<< "${chan_config}") && \
              echo "::set-output name=chan_platforms::${chan_platforms}"
          chan_tests_enabled=$(jq --raw-output '.tests.enabled' <<< "${chan_config}") && \
              echo "::set-output name=chan_tests_enabled::${chan_tests_enabled}"
          chan_tests_type=$(jq --raw-output '.tests.type' <<< "${chan_config}") && \
              echo "::set-output name=chan_tests_type::${chan_tests_type}"

          chan_upstream_version=$(bash ./.github/scripts/upstream.sh "${{ matrix.image.app }}" "${{ matrix.image.channel }}") && \
              echo "::set-output name=chan_upstream_version::${chan_upstream_version}"

          if [[ "${chan_tests_enabled}" == true && "${chan_tests_type}" == "cli" ]]; then
              echo "::set-output name=chan_goss_args::tail -f /dev/null"
          fi

          if [[ "${container_base}" == true ]]; then
              echo "::set-output name=chan_label_type::org.opencontainers.image.base"
          else
              echo "::set-output name=chan_label_type::org.opencontainers.image"
          fi

          if test -f "./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/Dockerfile"; then
              echo "::set-output name=chan_dockerfile::./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/Dockerfile"
              echo "::set-output name=chan_goss_config::./apps/${{ matrix.image.app }}/${{ matrix.image.channel }}/goss.yaml"
          else
              echo "::set-output name=chan_dockerfile::./apps/${{ matrix.image.app }}/Dockerfile"
              echo "::set-output name=chan_goss_config::./apps/${{ matrix.image.app }}/ci/goss.yaml"
          fi

          if [[ "${chan_stable}" == true ]]; then
              echo "::set-output name=chan_tag_cache::${{ matrix.image.app }}:cachez"
              echo "::set-output name=chan_tag_rolling::${{ matrix.image.app }}:rolling"
              echo "::set-output name=chan_tag_version::${{ matrix.image.app }}:${chan_upstream_version}"
          else
              echo "::set-output name=chan_tag_cache::${{ matrix.image.app }}-${{ matrix.image.channel }}:cachez"
              echo "::set-output name=chan_tag_rolling::${{ matrix.image.app }}-${{ matrix.image.channel }}:rolling"
              echo "::set-output name=chan_tag_version::${{ matrix.image.app }}-${{ matrix.image.channel }}:${chan_upstream_version}"
          fi

      # Install tools
      - name: Setup cli tools
        shell: bash
        run: sudo apt-get install moreutils jo

      - name: Setup CUE
        uses: cue-lang/setup-cue@v1.0.0-alpha.2

      - name: Setup Goss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        uses: e1himself/goss-installation-action@v1.0.4
        with:
          # renovate: datasource=github-releases depName=aelsabbahy/goss
          version: v0.3.18

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest
          buildkitd-flags: --debug

      # Validate image
      - name: Validate image metadata
        shell: bash
        run: |-
          cue vet --schema '#Spec' ./apps/${{ matrix.image.app }}/metadata.json ./metadata.rules.cue

      - name: Build cache container
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ matrix.image.channel }}
          labels: |-
            ${{ steps.vars.outputs.chan_label_type }}.created="${{ steps.vars.outputs.chan_build_date }}"
            ${{ steps.vars.outputs.chan_label_type }}.title="${{ matrix.image.app }} (${{ matrix.image.channel }})"
            ${{ steps.vars.outputs.chan_label_type }}.version="${{ steps.vars.outputs.chan_upstream_version }}"
            ${{ steps.vars.outputs.chan_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          file: ${{ steps.vars.outputs.chan_dockerfile }}
          load: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_cache }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss tests
        id: dgoss
        if: ${{ steps.vars.outputs.chan_tests_enabled == 'true' }}
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.chan_goss_config }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: >
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_cache }} ${{ steps.vars.outputs.chan_goss_args }}

      # Push image
      - name: Build and push
        if: ${{ inputs.pushImages == 'true' }}
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.chan_upstream_version }}
            CHANNEL=${{ matrix.image.channel }}
          labels: |-
            ${{ steps.vars.outputs.chan_label_type }}.created="${{ steps.vars.outputs.chan_build_date }}"
            ${{ steps.vars.outputs.chan_label_type }}.title="${{ matrix.image.app }} (${{ matrix.image.channel }})"
            ${{ steps.vars.outputs.chan_label_type }}.version="${{ steps.vars.outputs.chan_upstream_version }}"
            ${{ steps.vars.outputs.chan_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          platforms: ${{ steps.vars.outputs.chan_platforms }}
          file: ${{ steps.vars.outputs.chan_dockerfile }}
          push: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_rolling }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.chan_tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build_success:
    needs:
      - build-and-test
    if: |
      always()
    name: Build matrix success
    runs-on: ubuntu-latest
    steps:
      - name: Check build matrix status
        if: ${{ (inputs.imagesToBuild != '') && (needs.build-and-test.result != 'success') }}
        run: exit 1
