---
name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/metadata.json'
  pull_request:
    paths:
      - '**/metadata.json'

env:
  # renovate: datasource=github-releases depName=aelsabbahy/goss
  GOSS_VERSION: v0.3.18

jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-latest
    outputs:
      matrix: "{\"container\": ${{ steps.changed.outputs.containers }} }"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # needed for tj-actions/changed-files

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changed:
              - added|modified:
                  - '**/metadata.json'

      - name: Debug filter
        run: echo "${{ toJson(steps.filter.outputs) }}"

      - name: Gather changes
        id: changed
        run: |
          containers=$(jq --raw-output '.changed_files' <<< '${{ toJson(steps.filter.outputs) }}')
          echo "${containers}"
          echo ::set-output name=containers::${containers}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      max-parallel: 5
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install OS tools
        run: sudo apt-get install moreutils jo

      - name: Setup common workflow vars
        id: envs
        run: |-
          echo ::set-output name=__build_date::$(date --rfc-3339=seconds --utc)
          echo ::set-output name=__app::$(echo "${{ matrix.container }}" | awk -F / '{print $2}')
          echo ::set-output name=__current_version::$(jq --raw-output '.__current_version' ${{ matrix.container }})
          echo ::set-output name=__stream::$(echo "${{ matrix.container }}" | awk -F / '{print $3}')
          echo ::set-output name=__stable::$(jq --raw-output '.__stable' ${{ matrix.container }})
          echo ::set-output name=__platforms::$(jq --raw-output '.__platforms | join(",")' ${{ matrix.container }})
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo ::set-output name=__container_push::false
            echo ::set-output name=__cache_from::""
            echo ::set-output name=__cache_to::""
          else
            echo ::set-output name=__container_push::true
            echo ::set-output name=__cache_from::"type=gha"
            echo ::set-output name=__cache_to::"type=gha,mode=max"
          fi

      - name: Setup Tags
        id: tags
        run: |-
          [[ "${{ steps.envs.outputs.__stable }}" == "false" ]] && s="-${{ steps.envs.outputs.__stream }}"
          if [[ "${{ steps.envs.outputs.__app }}" == "ubuntu" ]]; then
            echo ::set-output name=rolling::ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }}:rolling
          else
            echo ::set-output name=rolling::ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}${s}:rolling
            echo ::set-output name=semver::ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}${s}:v${{ steps.envs.outputs.__current_version }}
          fi

      - name: Setup Dockerfile
        id: dockerfile
        run: |-
          echo ::set-output name=dockerfile::apps/${{ steps.envs.outputs.__app }}/Dockerfile
          if test -f "apps/${{ steps.envs.outputs.__app }}/${{ steps.envs.outputs.__stream }}/Dockerfile"; then
              echo ::set-output name=dockerfile::apps/${{ steps.envs.outputs.__app }}/${{ steps.envs.outputs.__stream }}/Dockerfile
          fi

      - name: Setup Goss
        id: goss
        run: |-
          gossfile="apps/${{ steps.envs.outputs.__app }}/goss.yaml"
          if test -f "apps/${{ steps.envs.outputs.__app }}/${{ steps.envs.outputs.__stream }}/goss.yaml"; then
              gossfile="apps/${{ steps.envs.outputs.__app }}/${{ steps.envs.outputs.__stream }}/goss.yaml"
          fi
          if test -f "${gossfile}"; then
              echo ::set-output name=enabled::true
          else
              echo ::set-output name=enabled::false
          fi
          echo ::set-output name=gossfile::${gossfile}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ steps.envs.outputs.__platforms }}

      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Set up GOSS
        uses: e1himself/goss-installation-action@v1.0.4
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: Build cache container
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.envs.outputs.__current_version }}
            STREAM=${{ steps.envs.outputs.__stream }}
          labels: |-
            org.opencontainers.image.created=${{ steps.envs.outputs.__build_date }}
          context: .
          # platforms: ${{ steps.envs.outputs.__platforms }} # cannot cache-from/to on fat manifests
          file: ${{ steps.dockerfile.outputs.dockerfile }}
          load: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }}:cachez
          cache-from: ${{ steps.envs.outputs.__cache_from }}
          cache-to: ${{ steps.envs.outputs.__cache_to }}

      - name: Run GOSS tests
        id: dgoss
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.goss.outputs.gossfile }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: |-
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }}:cachez

      - name: Release
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.envs.outputs.__current_version }}
            STREAM=${{ steps.envs.outputs.__stream }}
          labels: |-
            org.opencontainers.image.created=${{ steps.envs.outputs.__build_date }}
          context: .
          platforms: ${{ steps.envs.outputs.__platforms }}
          file: ${{ steps.dockerfile.outputs.dockerfile }}
          push: ${{ steps.envs.outputs.__container_push }}
          tags: |-
            ${{ steps.tags.outputs.rolling }}
            ${{ steps.tags.outputs.semver }}
          cache-from: ${{ steps.envs.outputs.__cache_from }}
          cache-to: ${{ steps.envs.outputs.__cache_to }}

      - name: Build successful
        id: build-success
        if: ${{ always() && github.event_name != 'pull_request' }}
        run: |-
          jq '.__build_status.__success = true' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          jq --arg v "${{ steps.envs.outputs.__build_date }}" '.__build_status.__ts = $v' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          echo "::set-output name=commit-message::ðŸŽ‰ Success building ${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }} (${{ steps.envs.outputs.__current_version }})"

      - name: Build failed
        id: build-failed
        if: ${{ failure() && github.event_name != 'pull_request' && (steps.release.outcome == 'failure' || steps.dgoss.outcome != 'success') }}
        run: |-
          jq '.__build_status.__success = false' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          jq --arg v "${{ steps.envs.outputs.__build_date }}" '.__build_status.__ts = $v' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          echo "::set-output name=commit-message::ðŸ’¥ Error building ${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }} (${{ steps.envs.outputs.__current_version }})"

      - name: Snoozing randomly
        if: ${{ always() && github.event_name != 'pull_request' }}
        run: |-
          perl -e 'sleep int(rand(15))'
          perl -e 'sleep int(rand(15))'

      - name: Git pull in changes
        if: ${{ always() && github.event_name != 'pull_request' }}
        run: git pull --rebase --autostash

      - name: Git commit changes
        id: commit-changes
        if: ${{ always() && github.event_name != 'pull_request' }}
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}
          file_pattern: "apps/*.json"
          push_options: "--force"

      # In the matrix it is possible for things to complete 
      # just at the right time to throw a conflict, in that 
      # case it will try to pull and commit one more time
      - name: Snoozing randomly (retry)
        if: ${{ always() && github.event_name != 'pull_request' && steps.commit-changes.outcome == 'failure' }}
        run: |-
          perl -e 'sleep int(rand(15))'
          perl -e 'sleep int(rand(15))'

      - name: Git pull in changes (retry)
        if: ${{ always() && github.event_name != 'pull_request' && steps.commit-changes.outcome == 'failure' }}
        run: git pull --rebase --autostash

      - name: Git commit changes (retry)
        if: ${{ always() && github.event_name != 'pull_request' && steps.commit-changes.outcome == 'failure' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}
          file_pattern: "apps/*.json"
          push_options: "--force"
